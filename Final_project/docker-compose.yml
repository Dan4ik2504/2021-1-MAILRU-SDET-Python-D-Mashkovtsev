version: '2.1'

networks:
  myapp_network:
    external: true
    name: ${DOCKER_NETWORK_NAME}

services:
  myapp_db:
    image: "percona:latest"
    networks:
      - myapp_network
    environment:
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_DATABASE: myapp_db
    volumes:
      - ./application/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "${MYAPP_DB_PORT}:3306"
    healthcheck:
      test: ['CMD', 'mysqladmin', '-uroot', '-ppass', 'ping', '-h', '127.0.0.1']
      timeout: 1s
      retries: 30

  vk_api:
    build: ./application/mock/
    networks:
      - myapp_network
    volumes:
      - ./application/mock/flask_app:/app
    working_dir: /app
    entrypoint: ["python", "views.py"]
    ports:
      - "${VK_API_PORT}:8008"
    depends_on:
      myapp_db:
        condition: service_healthy

  myapp:
    image: "myapp:latest"
    networks:
      - myapp_network
    environment:
      MYAPP_PORT: ${MYAPP_PORT}
      MYAPP_DB_PORT: ${MYAPP_DB_PORT}
      VK_API_PORT: ${VK_API_PORT}
    entrypoint: /bin/bash -c "envsubst < /config/config.txt.template > /config/config.txt && /app/myapp --config=/config/config.txt"
    volumes:
      - ./application/myapp/config/config.txt.template:/config/config.txt.template
      - /usr/bin/envsubst:/usr/bin/envsubst
    ports:
      - "${MYAPP_PORT}:8071"
    depends_on:
      myapp_db:
        condition: service_healthy
      vk_api:
        condition: service_started

  myapp_proxy:
    image: "nginx:stable"
    networks:
      - myapp_network
    ports:
      - "${MYAPP_PROXY_PORT}:8070"
    environment:
      MYAPP_PORT: ${MYAPP_PORT}
      MYAPP_PROXY_PORT: ${MYAPP_PROXY_PORT}
    volumes:
      - ./application/myapp_proxy/nginx/default.conf.template:/etc/nginx/templates/default.conf.template
    depends_on:
      myapp:
        condition: service_started
