import allure

from ui.pages.base_page_auth import BasePageAuth
from ui.pages.new_campaign_page import NewCampaignPage
from selenium.common.exceptions import StaleElementReferenceException
from ui.locators import pages_locators
import settings


class Campaign:
    """Campaign object generated by campaigns table object"""
    _checkbox = None

    def __init__(self, table, campaign_id):
        self.table = table
        self.campaign_id = campaign_id

        with allure.step(f'Searching for campaign "{self.campaign_id}" name in the table'):
            name_locator = self.table.dashboard_page.locators.Table.TABLE_CELL_NAME_BY_ID
            self.new_campaign_name_locator = (name_locator[0], name_locator[1].format(campaign_id=self.campaign_id))
            self.name = self.table.dashboard_page.find(self.new_campaign_name_locator).text
            self.table.dashboard_page.logger.info(f'Campaign "{self.campaign_id}" name found: "{self.name}"')

        status_locator = self.table.dashboard_page.locators.Table.TABLE_CELL_STATUS_BY_ID
        self.new_status_locator = (status_locator[0], status_locator[1].format(campaign_id=self.campaign_id))

        checkbox_locator = self.table.dashboard_page.locators.Table.TABLE_CELL_CHECKBOX_BY_ID
        self.checkbox_locator = (checkbox_locator[0], checkbox_locator[1].format(campaign_id=self.campaign_id))

    @property
    def checkbox(self):
        try:
            if self._checkbox:
                # Checking that element is not stale
                _ = self._checkbox.tag_name
                return self._checkbox
        except StaleElementReferenceException:
            pass
        self._checkbox = self.table.dashboard_page.find(self.checkbox_locator)
        return self._checkbox

    @property
    def checkbox_status(self):
        status = self.checkbox.is_selected()
        self.table.dashboard_page.logger.debug(f'Checkbox of the campaign "{str(self)}" status: "{status}"')
        return status

    @property
    @allure.step(f'Searching for campaign status in the table')
    def status(self):
        with allure.step(f'Searching for campaign "{self.campaign_id}-{self.name}" status in the table'):
            status = self.table.dashboard_page.find(self.new_status_locator).text
            self.table.dashboard_page.logger.info(f'Campaign "{self.campaign_id}-{self.name}" status found: '
                                                  f'"{status}"')
            return status

    def _is_active(self):
        deleted_campaign_status = "Кампания удалена"
        result = self.status != deleted_campaign_status
        self.table.dashboard_page.logger.debug(
            f'Campaign "{str(self)}" is active: "{result}". Campaign status: "{self.status}". '
            f'Expected status of deleted campaign: "{deleted_campaign_status}"')
        return result

    def is_active(self):
        return self._is_active()

    def is_deleted(self):
        return not self._is_active()

    @allure.step("Enabling the campaign checkbox")
    def enable_checkbox(self):
        self.table.dashboard_page.logger.info(
            f'Enabling the campaign "{str(self)}" checkbox found by locator: '
            f'"{self.checkbox_locator[1]}" (type: {self.checkbox_locator[0]})')

        if not self.checkbox_status:
            log_msg = f'Clicking on checkbox found by locator: "{self.checkbox_locator[1]}" ' \
                      f'(type: {self.checkbox_locator[0]})'
            with allure.step(log_msg):
                self.table.dashboard_page.logger.info(log_msg)
                self.checkbox.click()

    @allure.step("Disabling the campaign checkbox")
    def disable_checkbox(self):
        self.table.dashboard_page.logger.info(
            f'Disabling the campaign "{str(self)}" checkbox found by locator: '
            f'"{self.checkbox_locator[1]}" (type: {self.checkbox_locator[0]})')

        if self.checkbox_status:
            log_msg = f'Clicking on checkbox found by locator: "{self.checkbox_locator[1]}" ' \
                      f'(type: {self.checkbox_locator[0]})'
            with allure.step(log_msg):
                self.table.dashboard_page.logger.info(log_msg)
                self.checkbox.click()

    def __eq__(self, other):
        other = str(other)
        self.table.dashboard_page.logger.debug(
            f'Comparison of the name "{self.name}" or ID "{self.campaign_id}" of the campaign '
            f'with the given string: "{other}"')
        if other.isdigit():
            return self.campaign_id == other
        return self.name == other

    def __str__(self):
        return f'{self.campaign_id}-{self.name}'

    def __repr__(self):
        return "Campaign object. Id: {id}. Name: {name}.".format(id=self.campaign_id, name=self.name)


class CampaignsTable:
    """Object of the table displayed on the dashboard page"""
    _campaigns = None

    class CampaignDoesNotExistsException(Exception):
        pass

    def __init__(self, dashboard_page):
        self.dashboard_page = dashboard_page
        self.actions = self._Actions(self)

    @allure.step("Searching for campaigns in the table")
    def _get_campaigns(self, active_only=True):
        self.dashboard_page.logger.info('Searching for campaigns in the table')
        campaigns = []
        for campaign in self.dashboard_page.find_elements(self.dashboard_page.locators.Table.TABLE_CELL_ID):
            campaign_id = campaign.text
            log_msg = f'Campaign "{campaign_id}" found. Creating campaign object'
            with allure.step(log_msg):
                self.dashboard_page.logger.info(log_msg)
                campaign = Campaign(self, campaign_id)
                if active_only:
                    with allure.step(f'Checking that campaign is active'):
                        if campaign.is_active():
                            self.dashboard_page.logger.info(
                                f'Campaign "{str(campaign)}" is active. Added in campaigns list')
                            campaigns.append(campaign)
                        else:
                            self.dashboard_page.logger.info(f'Campaign "{str(campaign)}" is not active')
                else:
                    self.dashboard_page.logger.info(f'Campaign "{str(campaign)}" added in campaigns list')
                    campaigns.append(campaign)
        self.dashboard_page.logger.info(f'Found {len(campaigns)} campaigns')
        if len(campaigns) > 0:
            self.dashboard_page.logger.debug(
                f'Found {len(campaigns)} campaigns: {self.get_campaigns_list_in_str(campaigns)}')
        return campaigns

    @property
    def campaigns_list(self):
        return self.dashboard_page.custom_wait(self._get_campaigns, error=StaleElementReferenceException, check=False)

    def get_campaigns_list_in_str(self, campaigns_list=None):
        if not campaigns_list:
            campaigns_list = self.campaigns_list

        return "; ".join([str(campaign) for campaign in campaigns_list])

    @allure.step("Searching for checked_campaigns")
    def get_checked_campaigns(self):
        checked_campaigns = list(filter(lambda campaign: campaign.checkbox_status, self.campaigns_list))
        self.dashboard_page.logger.info(f'Found {len(checked_campaigns)} checked campaigns')
        if len(checked_campaigns) > 0:
            self.dashboard_page.logger.debug(f'Found {len(checked_campaigns)} checked campaigns: '
                                             f'{self.get_campaigns_list_in_str(checked_campaigns)}')
        return checked_campaigns

    @allure.step('Searching for campaign with name "{name}"')
    def get_campaign_by_name(self, name):
        self.dashboard_page.logger.debug(
            f'Searching for campaign "{name}" in campaigns: {self.get_campaigns_list_in_str()}')
        for campaign in self.campaigns_list:
            if campaign.name == name:
                self.dashboard_page.logger.info(f'Campaign with "{name}" found: "{str(campaign)}"')
                return campaign
        raise self.CampaignDoesNotExistsException(f'Campaign "{name}" does not exists')

    class _Actions:
        _actions_wrapper = None

        def __init__(self, table):
            self.table = table
            self.actions_wrapper_locator = self.table.dashboard_page.locators.Table.TABLE_ACTIONS_WRAPPER_BUTTON
            self.delete_button_locator = self.table.dashboard_page.locators.Table.DELETE_ACTION_BUTTON

        class ActionsIsNotEnabledException(Exception):
            pass

        @property
        def actions_wrapper(self):
            try:
                if self._actions_wrapper:
                    # Checking that element is not stale
                    _ = self._actions_wrapper.tag_name
                    return self._actions_wrapper
            except StaleElementReferenceException:
                pass
            self._actions_wrapper = self.table.dashboard_page.find(self.actions_wrapper_locator)
            return self._actions_wrapper

        @property
        def is_actions_enabled(self):
            is_enabled = "select-module-disabled-" not in self.actions_wrapper.get_attribute("class")
            self.table.dashboard_page.logger.debug(
                f'Actions wrapper found by locator "{self.actions_wrapper_locator[1]}" '
                f'(type: {self.actions_wrapper_locator[0]}) is enabled: "{is_enabled}"')
            if is_enabled:
                return True
            else:
                raise self.ActionsIsNotEnabledException(
                    f'Actions wrapper found by locator "{self.actions_wrapper_locator[1]}" '
                    f'(type: {self.actions_wrapper_locator[0]}) is not enabled. '
                    f'Probably there are no campaigns to be selected')

        @property
        def is_delete_button_visible(self):
            result = not self.table.dashboard_page.check.is_not_visible(locator=self.delete_button_locator,
                                                                        raise_exception=False)
            self.table.dashboard_page.logger.debug(
                f'Delete button found by locator "{self.delete_button_locator[1]}" '
                f'(type: {self.delete_button_locator[0]}) is visible: "{result}"')
            return result

        @allure.step('Opening actions')
        def open_actions(self):
            self.table.dashboard_page.logger.info(
                f'Opening actions by clicking on wrapper found by locator: "{self.actions_wrapper_locator[1]}" '
                f'(type: {self.actions_wrapper_locator[0]})')
            is_actions_enabled = self.is_actions_enabled
            is_delete_btn_visible = self.is_delete_button_visible
            self.table.dashboard_page.logger.debug(f'Is actions wrapper enabled: "{is_actions_enabled}". '
                                                   f'Is delete button visible: "{is_delete_btn_visible}"')
            if is_actions_enabled and not is_delete_btn_visible:
                log_msg = f'Clicking on actions wrapper found by locator "{self.actions_wrapper_locator[1]}" ' \
                          f'(type: {self.actions_wrapper_locator[0]})'
                with allure.step(log_msg):
                    self.table.dashboard_page.logger.info(log_msg)
                    self.actions_wrapper.click()

        @allure.step('Removing selected campaigns')
        def delete_selected_campaigns(self):
            self.open_actions()
            log_msg = 'Clicking on remove campaigns button'
            with allure.step(log_msg):
                checked_campaigns = self.table.get_checked_campaigns()
                checked_campaign = checked_campaigns[0]
                self.table.dashboard_page.logger.info(log_msg)
                self.table.dashboard_page.custom_wait(self.table.dashboard_page.check.is_visible,
                                                      locator=self.delete_button_locator)
                self.table.dashboard_page.click(self.delete_button_locator)
                with allure.step('Waiting for campaign deleting'):
                    self.table.dashboard_page.custom_wait(checked_campaign.is_deleted)
                self.table.dashboard_page.logger.info(f'Checked campaigns deleted')


class DashboardPage(BasePageAuth):
    URL = settings.Url.DASHBOARD
    locators = pages_locators.Dashboard

    def __init__(self, driver):
        super().__init__(driver)
        self.campaigns_table = CampaignsTable(self)

    class NewCampaignPageOpenException(Exception):
        pass

    @allure.step('Checking that the dashboard page is open')
    def is_opened(self):
        spinner_locator = self.locators.PAGE_LOADING_SPINNER
        if not self.check.is_exists(spinner_locator, raise_exception=False):
            self.logger.info(f'Dashboard page loaded')
            return True
        raise self.check.PageNotOpenedException(f"Spinner exists: {spinner_locator[1]} (type: {spinner_locator[0]})")

    @allure.step("Going to create campaign page")
    def go_to_create_campaign_page(self):
        """Opens a campaign page and returns an object of that page"""
        self.logger.info('Clicking on create campaign button')

        create_campaign_btns = (self.locators.CREATE_CAMPAIGN_BUTTON,
                                self.locators.CREATE_CAMPAIGN_INSTRUCTION_LINK)
        elem = None
        for locator in create_campaign_btns:
            try:
                elem = self.fast_find(locator)
            except self.FastFindingException:
                continue
            else:
                if elem and self.check.is_element_visible(elem, raise_exception=False):
                    self.click(locator)
                    break

        if not elem:
            self.NewCampaignPageOpenException(
                f'Unable to navigate to the page for creating a new campaign '
                f'because there is no button or link linking to it. '
                f'Checked button "{create_campaign_btns[0][1]}" (type: {create_campaign_btns[0][0]}) '
                f'and link "{create_campaign_btns[1][1]}" (type: {create_campaign_btns[1][0]})')

        self.logger.info('Opening the campaign creation page')
        new_campaign_page = NewCampaignPage(self, driver=self.driver)
        new_campaign_page.custom_wait(new_campaign_page.check.is_page_opened)
        self.logger.info(f'The campaign creation page is open')
        return new_campaign_page
